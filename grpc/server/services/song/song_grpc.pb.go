// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package song

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SongServiceClient is the client API for SongService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongServiceClient interface {
	CreateSong(ctx context.Context, opts ...grpc.CallOption) (SongService_CreateSongClient, error)
	UpdateSongUrl(ctx context.Context, opts ...grpc.CallOption) (SongService_UpdateSongUrlClient, error)
	GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error)
	GetAllSongs(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error)
	GetArtistSongs(ctx context.Context, in *GetArtistSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error)
	UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error)
	DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error)
	LikeSong(ctx context.Context, in *LikeSongRequest, opts ...grpc.CallOption) (*LikeSongResponse, error)
	GetSongLikesCount(ctx context.Context, in *GetLikesCountRequest, opts ...grpc.CallOption) (*GetLikesCountResponse, error)
	GetSongViewCount(ctx context.Context, in *GetViewsCountRequest, opts ...grpc.CallOption) (*GetViewsCountResponse, error)
	IncreaseSongViewCount(ctx context.Context, in *IncreaseSongViewRequest, opts ...grpc.CallOption) (*IncreaseSongViewResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (SongService_DownloadFileClient, error)
}

type songServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSongServiceClient(cc grpc.ClientConnInterface) SongServiceClient {
	return &songServiceClient{cc}
}

func (c *songServiceClient) CreateSong(ctx context.Context, opts ...grpc.CallOption) (SongService_CreateSongClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SongService_serviceDesc.Streams[0], "/song.SongService/CreateSong", opts...)
	if err != nil {
		return nil, err
	}
	x := &songServiceCreateSongClient{stream}
	return x, nil
}

type SongService_CreateSongClient interface {
	Send(*CreateSongRequest) error
	CloseAndRecv() (*CreateSongResponse, error)
	grpc.ClientStream
}

type songServiceCreateSongClient struct {
	grpc.ClientStream
}

func (x *songServiceCreateSongClient) Send(m *CreateSongRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *songServiceCreateSongClient) CloseAndRecv() (*CreateSongResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateSongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *songServiceClient) UpdateSongUrl(ctx context.Context, opts ...grpc.CallOption) (SongService_UpdateSongUrlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SongService_serviceDesc.Streams[1], "/song.SongService/UpdateSongUrl", opts...)
	if err != nil {
		return nil, err
	}
	x := &songServiceUpdateSongUrlClient{stream}
	return x, nil
}

type SongService_UpdateSongUrlClient interface {
	Send(*UpdateSongUrlRequest) error
	CloseAndRecv() (*UpdateSongUrlResponse, error)
	grpc.ClientStream
}

type songServiceUpdateSongUrlClient struct {
	grpc.ClientStream
}

func (x *songServiceUpdateSongUrlClient) Send(m *UpdateSongUrlRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *songServiceUpdateSongUrlClient) CloseAndRecv() (*UpdateSongUrlResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateSongUrlResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *songServiceClient) GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error) {
	out := new(GetSongResponse)
	err := c.cc.Invoke(ctx, "/song.SongService/GetSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) GetAllSongs(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error) {
	out := new(GetSongsResponse)
	err := c.cc.Invoke(ctx, "/song.SongService/GetAllSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) GetArtistSongs(ctx context.Context, in *GetArtistSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error) {
	out := new(GetSongsResponse)
	err := c.cc.Invoke(ctx, "/song.SongService/GetArtistSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error) {
	out := new(UpdateSongResponse)
	err := c.cc.Invoke(ctx, "/song.SongService/UpdateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error) {
	out := new(DeleteSongResponse)
	err := c.cc.Invoke(ctx, "/song.SongService/DeleteSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) LikeSong(ctx context.Context, in *LikeSongRequest, opts ...grpc.CallOption) (*LikeSongResponse, error) {
	out := new(LikeSongResponse)
	err := c.cc.Invoke(ctx, "/song.SongService/LikeSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) GetSongLikesCount(ctx context.Context, in *GetLikesCountRequest, opts ...grpc.CallOption) (*GetLikesCountResponse, error) {
	out := new(GetLikesCountResponse)
	err := c.cc.Invoke(ctx, "/song.SongService/GetSongLikesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) GetSongViewCount(ctx context.Context, in *GetViewsCountRequest, opts ...grpc.CallOption) (*GetViewsCountResponse, error) {
	out := new(GetViewsCountResponse)
	err := c.cc.Invoke(ctx, "/song.SongService/GetSongViewCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) IncreaseSongViewCount(ctx context.Context, in *IncreaseSongViewRequest, opts ...grpc.CallOption) (*IncreaseSongViewResponse, error) {
	out := new(IncreaseSongViewResponse)
	err := c.cc.Invoke(ctx, "/song.SongService/IncreaseSongViewCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (SongService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SongService_serviceDesc.Streams[2], "/song.SongService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &songServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SongService_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type songServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *songServiceDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SongServiceServer is the server API for SongService service.
// All implementations must embed UnimplementedSongServiceServer
// for forward compatibility
type SongServiceServer interface {
	CreateSong(SongService_CreateSongServer) error
	UpdateSongUrl(SongService_UpdateSongUrlServer) error
	GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error)
	GetAllSongs(context.Context, *GetSongsRequest) (*GetSongsResponse, error)
	GetArtistSongs(context.Context, *GetArtistSongsRequest) (*GetSongsResponse, error)
	UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error)
	DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error)
	LikeSong(context.Context, *LikeSongRequest) (*LikeSongResponse, error)
	GetSongLikesCount(context.Context, *GetLikesCountRequest) (*GetLikesCountResponse, error)
	GetSongViewCount(context.Context, *GetViewsCountRequest) (*GetViewsCountResponse, error)
	IncreaseSongViewCount(context.Context, *IncreaseSongViewRequest) (*IncreaseSongViewResponse, error)
	DownloadFile(*DownloadFileRequest, SongService_DownloadFileServer) error
	mustEmbedUnimplementedSongServiceServer()
}

// UnimplementedSongServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSongServiceServer struct {
}

func (*UnimplementedSongServiceServer) CreateSong(SongService_CreateSongServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateSong not implemented")
}
func (*UnimplementedSongServiceServer) UpdateSongUrl(SongService_UpdateSongUrlServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateSongUrl not implemented")
}
func (*UnimplementedSongServiceServer) GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSong not implemented")
}
func (*UnimplementedSongServiceServer) GetAllSongs(context.Context, *GetSongsRequest) (*GetSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSongs not implemented")
}
func (*UnimplementedSongServiceServer) GetArtistSongs(context.Context, *GetArtistSongsRequest) (*GetSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistSongs not implemented")
}
func (*UnimplementedSongServiceServer) UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (*UnimplementedSongServiceServer) DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (*UnimplementedSongServiceServer) LikeSong(context.Context, *LikeSongRequest) (*LikeSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeSong not implemented")
}
func (*UnimplementedSongServiceServer) GetSongLikesCount(context.Context, *GetLikesCountRequest) (*GetLikesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongLikesCount not implemented")
}
func (*UnimplementedSongServiceServer) GetSongViewCount(context.Context, *GetViewsCountRequest) (*GetViewsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongViewCount not implemented")
}
func (*UnimplementedSongServiceServer) IncreaseSongViewCount(context.Context, *IncreaseSongViewRequest) (*IncreaseSongViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSongViewCount not implemented")
}
func (*UnimplementedSongServiceServer) DownloadFile(*DownloadFileRequest, SongService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (*UnimplementedSongServiceServer) mustEmbedUnimplementedSongServiceServer() {}

func RegisterSongServiceServer(s *grpc.Server, srv SongServiceServer) {
	s.RegisterService(&_SongService_serviceDesc, srv)
}

func _SongService_CreateSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SongServiceServer).CreateSong(&songServiceCreateSongServer{stream})
}

type SongService_CreateSongServer interface {
	SendAndClose(*CreateSongResponse) error
	Recv() (*CreateSongRequest, error)
	grpc.ServerStream
}

type songServiceCreateSongServer struct {
	grpc.ServerStream
}

func (x *songServiceCreateSongServer) SendAndClose(m *CreateSongResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *songServiceCreateSongServer) Recv() (*CreateSongRequest, error) {
	m := new(CreateSongRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SongService_UpdateSongUrl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SongServiceServer).UpdateSongUrl(&songServiceUpdateSongUrlServer{stream})
}

type SongService_UpdateSongUrlServer interface {
	SendAndClose(*UpdateSongUrlResponse) error
	Recv() (*UpdateSongUrlRequest, error)
	grpc.ServerStream
}

type songServiceUpdateSongUrlServer struct {
	grpc.ServerStream
}

func (x *songServiceUpdateSongUrlServer) SendAndClose(m *UpdateSongUrlResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *songServiceUpdateSongUrlServer) Recv() (*UpdateSongUrlRequest, error) {
	m := new(UpdateSongUrlRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SongService_GetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).GetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/song.SongService/GetSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).GetSong(ctx, req.(*GetSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_GetAllSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).GetAllSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/song.SongService/GetAllSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).GetAllSongs(ctx, req.(*GetSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_GetArtistSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtistSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).GetArtistSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/song.SongService/GetArtistSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).GetArtistSongs(ctx, req.(*GetArtistSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/song.SongService/UpdateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).UpdateSong(ctx, req.(*UpdateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/song.SongService/DeleteSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).DeleteSong(ctx, req.(*DeleteSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_LikeSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).LikeSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/song.SongService/LikeSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).LikeSong(ctx, req.(*LikeSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_GetSongLikesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).GetSongLikesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/song.SongService/GetSongLikesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).GetSongLikesCount(ctx, req.(*GetLikesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_GetSongViewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).GetSongViewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/song.SongService/GetSongViewCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).GetSongViewCount(ctx, req.(*GetViewsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_IncreaseSongViewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSongViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).IncreaseSongViewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/song.SongService/IncreaseSongViewCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).IncreaseSongViewCount(ctx, req.(*IncreaseSongViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongServiceServer).DownloadFile(m, &songServiceDownloadFileServer{stream})
}

type SongService_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type songServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *songServiceDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SongService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "song.SongService",
	HandlerType: (*SongServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSong",
			Handler:    _SongService_GetSong_Handler,
		},
		{
			MethodName: "GetAllSongs",
			Handler:    _SongService_GetAllSongs_Handler,
		},
		{
			MethodName: "GetArtistSongs",
			Handler:    _SongService_GetArtistSongs_Handler,
		},
		{
			MethodName: "UpdateSong",
			Handler:    _SongService_UpdateSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _SongService_DeleteSong_Handler,
		},
		{
			MethodName: "LikeSong",
			Handler:    _SongService_LikeSong_Handler,
		},
		{
			MethodName: "GetSongLikesCount",
			Handler:    _SongService_GetSongLikesCount_Handler,
		},
		{
			MethodName: "GetSongViewCount",
			Handler:    _SongService_GetSongViewCount_Handler,
		},
		{
			MethodName: "IncreaseSongViewCount",
			Handler:    _SongService_IncreaseSongViewCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateSong",
			Handler:       _SongService_CreateSong_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateSongUrl",
			Handler:       _SongService_UpdateSongUrl_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _SongService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "song.proto",
}
