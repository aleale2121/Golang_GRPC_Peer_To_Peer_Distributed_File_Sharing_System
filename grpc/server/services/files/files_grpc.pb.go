// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SongsServiceClient is the client API for SongsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongsServiceClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	UploadSong(ctx context.Context, opts ...grpc.CallOption) (SongsService_UploadSongClient, error)
	GetSongsList(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error)
	DownloadSong(ctx context.Context, in *DownloadSongRequest, opts ...grpc.CallOption) (SongsService_DownloadSongClient, error)
}

type songsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSongsServiceClient(cc grpc.ClientConnInterface) SongsServiceClient {
	return &songsServiceClient{cc}
}

func (c *songsServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/music.SongsService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) UploadSong(ctx context.Context, opts ...grpc.CallOption) (SongsService_UploadSongClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SongsService_serviceDesc.Streams[0], "/music.SongsService/UploadMusic", opts...)
	if err != nil {
		return nil, err
	}
	x := &songsServiceUploadSongClient{stream}
	return x, nil
}

type SongsService_UploadSongClient interface {
	Send(*UploadSongRequest) error
	CloseAndRecv() (*UploadSongResponse, error)
	grpc.ClientStream
}

type songsServiceUploadSongClient struct {
	grpc.ClientStream
}

func (x *songsServiceUploadSongClient) Send(m *UploadSongRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *songsServiceUploadSongClient) CloseAndRecv() (*UploadSongResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadSongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *songsServiceClient) GetSongsList(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error) {
	out := new(GetSongsResponse)
	err := c.cc.Invoke(ctx, "/music.SongsService/GetSongsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) DownloadSong(ctx context.Context, in *DownloadSongRequest, opts ...grpc.CallOption) (SongsService_DownloadSongClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SongsService_serviceDesc.Streams[1], "/music.SongsService/DownloadSong", opts...)
	if err != nil {
		return nil, err
	}
	x := &songsServiceDownloadSongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SongsService_DownloadSongClient interface {
	Recv() (*DownloadSongResponse, error)
	grpc.ClientStream
}

type songsServiceDownloadSongClient struct {
	grpc.ClientStream
}

func (x *songsServiceDownloadSongClient) Recv() (*DownloadSongResponse, error) {
	m := new(DownloadSongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SongsServiceServer is the server API for SongsService service.
// All implementations must embed UnimplementedSongsServiceServer
// for forward compatibility
type SongsServiceServer interface {
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	UploadSong(SongsService_UploadSongServer) error
	GetSongsList(context.Context, *GetSongsRequest) (*GetSongsResponse, error)
	DownloadSong(*DownloadSongRequest, SongsService_DownloadSongServer) error
	mustEmbedUnimplementedSongsServiceServer()
}

// UnimplementedSongsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSongsServiceServer struct {
}

func (*UnimplementedSongsServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedSongsServiceServer) UploadSong(SongsService_UploadSongServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadMusic not implemented")
}
func (*UnimplementedSongsServiceServer) GetSongsList(context.Context, *GetSongsRequest) (*GetSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongsList not implemented")
}
func (*UnimplementedSongsServiceServer) DownloadSong(*DownloadSongRequest, SongsService_DownloadSongServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadSong not implemented")
}
func (*UnimplementedSongsServiceServer) mustEmbedUnimplementedSongsServiceServer() {}

func RegisterSongsServiceServer(s *grpc.Server, srv SongsServiceServer) {
	s.RegisterService(&_SongsService_serviceDesc, srv)
}

func _SongsService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.SongsService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_UploadSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SongsServiceServer).UploadSong(&songsServiceUploadSongServer{stream})
}

type SongsService_UploadSongServer interface {
	SendAndClose(*UploadSongResponse) error
	Recv() (*UploadSongRequest, error)
	grpc.ServerStream
}

type songsServiceUploadSongServer struct {
	grpc.ServerStream
}

func (x *songsServiceUploadSongServer) SendAndClose(m *UploadSongResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *songsServiceUploadSongServer) Recv() (*UploadSongRequest, error) {
	m := new(UploadSongRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SongsService_GetSongsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.SongsService/GetSongsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongsList(ctx, req.(*GetSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_DownloadSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadSongRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongsServiceServer).DownloadSong(m, &songsServiceDownloadSongServer{stream})
}

type SongsService_DownloadSongServer interface {
	Send(*DownloadSongResponse) error
	grpc.ServerStream
}

type songsServiceDownloadSongServer struct {
	grpc.ServerStream
}

func (x *songsServiceDownloadSongServer) Send(m *DownloadSongResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SongsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "music.SongsService",
	HandlerType: (*SongsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _SongsService_Connect_Handler,
		},
		{
			MethodName: "GetSongsList",
			Handler:    _SongsService_GetSongsList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadMusic",
			Handler:       _SongsService_UploadSong_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadSong",
			Handler:       _SongsService_DownloadSong_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "music.proto",
}
